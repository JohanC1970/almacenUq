package Almacen.controller;

import java.net.URL;
import java.util.ResourceBundle;

import Almacen.application.Aplicacion;
import Almacen.model.Almacen;
import Almacen.model.Cliente;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;

public class ClienteController implements Initializable{

	ModelFactoryController mfm = ModelFactoryController.getInstance();

    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private TextField txtDireccion;

    @FXML
    private TableColumn<Cliente, String> columnaTelefono;

    @FXML
    private ComboBox<String> comboxTipoCliente;

    @FXML
    private TableView<Cliente> tablaClientes;

    @FXML
    private DatePicker dateFechaNacimiento;

    @FXML
    private TextField txtEmail;

    @FXML
    private TextField txtNit;

    @FXML
    private TableColumn<Cliente, String> columnaIdentificacion;

    @FXML
    private TextField txtIdentificacion;

    @FXML
    private TextField txtNombre;

    @FXML
    private TableColumn<Cliente, String> columnaApellido;

    @FXML
    private Button btnEliminar;

    @FXML
    private TextField txtTelefono;

    @FXML
    private TextField txtApellido;

    @FXML
    private TableColumn<Cliente, String> columnaNombre;

    @FXML
    private Button btnRegistrar;

    @FXML
    private Button btnActualizar;

    private Aplicacion aplicacion;

    private Cliente clienteSeleccionado;

    private Stage stage;

    private Almacen almacen;

    ObservableList<Cliente>listadoClientes = FXCollections.observableArrayList();

    @Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub

	}

	public Aplicacion getAplicacion() {
		return aplicacion;
	}


	public void setAplicacion(Aplicacion aplicacion) {
		this.aplicacion = aplicacion;
		this.almacen = mfm.getAlmacen();

		tablaClientes.getItems().clear();
		tablaClientes.setItems(getClientes());
	}

	public Stage getStage() {
		return stage;
	}


	public void setStage(Stage stage) {
		this.stage = stage;
	}


	//-------------------------------------METODOS CRUD--------------------------------
    @FXML
    void registrarCliente(ActionEvent event) {

    }

    @FXML
    void actualizarCliente(ActionEvent event) {

    }

    @FXML
    void eliminarCliente(ActionEvent event) {


    }

    //-------------------------------------METODOS NECESARIOS--------------------------
    @FXML
    void validarIngresoNumeros(KeyEvent event) {

    }

	/**
	 * Este metodo es para pedir la lista de clientes del almacen
	 * @return
	 */
	private ObservableList<Cliente> getClientes() {
		listadoClientes.addAll(mfm.getListaClientes());
		return listadoClientes;
	}

	private void actualizarTabla(){
		tablaClientes.setItems(getClientes());
	}
}
